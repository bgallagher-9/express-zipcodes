{
  "_args": [
    [
      {
        "raw": "forecastio",
        "scope": null,
        "escapedName": "forecastio",
        "name": "forecastio",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/briangallagher/Dev/express-apps/zipcodes"
    ]
  ],
  "_from": "forecastio@latest",
  "_id": "forecastio@1.0.2",
  "_inCache": true,
  "_location": "/forecastio",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/forecastio-1.0.2.tgz_1465555056442_0.5985230654478073"
  },
  "_npmUser": {
    "name": "soplakanets",
    "email": "serhiy@oplakanets.com"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "forecastio",
    "scope": null,
    "escapedName": "forecastio",
    "name": "forecastio",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/forecastio/-/forecastio-1.0.2.tgz",
  "_shasum": "18863943ed8263f3021e46505c07c992b35ba966",
  "_shrinkwrap": null,
  "_spec": "forecastio",
  "_where": "/Users/briangallagher/Dev/express-apps/zipcodes",
  "author": {
    "name": "Serhiy Oplakanets",
    "email": "serhiy@oplakanets.com"
  },
  "bugs": {
    "url": "https://github.com/soplakanets/node-forecastio/issues"
  },
  "dependencies": {
    "request-promise": "^3.0.0"
  },
  "description": "A node.js wrapper for Forecast.io API",
  "devDependencies": {
    "mocha": "^2.5.3"
  },
  "directories": {},
  "dist": {
    "shasum": "18863943ed8263f3021e46505c07c992b35ba966",
    "tarball": "https://registry.npmjs.org/forecastio/-/forecastio-1.0.2.tgz"
  },
  "engines": {
    "node": ">=0.10 <=6.2"
  },
  "gitHead": "e8d1f952e5fd3553e863a163be6d5a2d93ee1766",
  "homepage": "https://github.com/soplakanets/node-forecastio",
  "keywords": [
    "weather",
    "forecast",
    "forecast.io"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "soplakanets",
      "email": "serhiy@oplakanets.com"
    }
  ],
  "name": "forecastio",
  "optionalDependencies": {},
  "readme": "forecastio\n==========\n\n[![Build Status](https://travis-ci.org/soplakanets/node-forecastio.svg?branch=master)](https://travis-ci.org/soplakanets/node-forecastio) [![Dependency Status](https://david-dm.org/soplakanets/node-forecastio.png)](https://david-dm.org/soplakanets/node-forecastio)\n![Badge](https://img.shields.io/badge/has%20nifty%20badges-yes-green.svg)\n\nA node.js client library for [Forecast.io API](https://developer.forecast.io).\n\nFor explanation and more detailed info about endpoints and response format see [Forecast.IO API documentation](https://developer.forecast.io/docs/v2)\n\n\n## Installation\n\n```\nnpm install forecastio\n```\n\n\n## Usage\nSay you need a [forecast](https://developer.forecast.io/docs/v2#forecast_call) for London, UK:\n\n```javascript\nvar ForecastIo = require('forecastio');\n\nvar forecastIo = new ForecastIo('<apiKey>');\nforecastIo.forecast('51.506', '-0.127').then(function(data) {\n  console.log(JSON.stringify(data, null, 2));\n});\n```\n\n\n### \"Time Machine\" Requests\nForecast.io also supports [Time Machine requests](https://developer.forecast.io/docs/v2#time_call). Quoting official documentation you can make request for \"60 years in the past to 10 years in the future\" for \"many places\". Example:\n\n```javascript\n// What was the weather like in London on January 1st 2008?\nforecastIo.timeMachine('51.506', '-0.127', '2008-01-01T00:00:01Z').then(function(data) {\n  console.log(JSON.stringify(data, null, 2));\n});\n```\n\n### API Options\nBoth `#forecast()` and `#timeMachine()` methods support passing additional options.\n*Below are some examples, for all options consult [Options section of Forecast.IO API documentation](https://developer.forecast.io/docs/v2#options).*\n\n\nExample of requesting ad forecast in Si(metric) units with only 'daily' fields:\n\n```javascript\nvar options = {\n  units: 'si',\n  exclude: 'currently,hourly,flags'\n};\nforecastIo.forecast('49.844', '24.028', options).then(function(data) {\n  console.log(JSON.stringify(data, null, 2));\n});\n```\n\nAnother example, a \"Time Machine\" request in UK units and localized in Italian:\n\n```javascript\nvar options = {\n  units: 'uk',\n  lang:  'it'\n};\nforecastIo.timeMachine('49.844', '24.028', '2008-01-01T00:00:01Z', options).then(function(data) {\n  console.log(JSON.stringify(data, null, 2));\n});\n```\n\n### Request Timeout\nTo set timeout for requests pass a timeout option to constructor, example:\n\n```javascript\nvar forecastIo = new ForecastIo('<apiKey>', {timeout: 30*1000});\n```\nAs a result all API request made with with this `forecastIo` instance will have a timeout of 30 seconds.\n\nTimeout option accepts time in milliseconds. If request will not finish in time - a callback will be fired with a timeout error.\n\n\n## TODO\n- Logging (for debugging at least)\n- Smarter API methods (accept `Date` object in `#timeMachine()` and convert it to string, for example)\n\n\n## Contributing\n* Fork the repo & commit changes\n* Make sure tests are not failing:\n\n  $ env FORECASTIO_API_KEY=`your_api_key` npm test\n\n* Create a pull request\n\n\n## Changelog\n\n#### 1.0.2\n- Fixed deprecation warnings.\n\n#### 1.0.0\n- Promises (For compatibility callbacks are still supported).\n\n#### 0.2.0\n- Added `timeout` option\n\n#### 0.1.2\n- More informative error messages.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/soplakanets/node-forecastio.git"
  },
  "scripts": {
    "test": "mocha -R spec -s 1500 -t 3000"
  },
  "version": "1.0.2",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=0.10 <=6.2"
      },
      "pkgid": "forecastio@1.0.2"
    },
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=0.10 <=6.2"
      },
      "pkgid": "forecastio@1.0.2"
    }
  ]
}
